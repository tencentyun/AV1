From 45491ce78d5e38e0aa6847559f8ec047c686fecb Mon Sep 17 00:00:00 2001
From: vacingfang <vacingfang@tencent.com>
Date: Fri, 30 Oct 2020 15:51:12 +0800
Subject: [PATCH 2/2] lavf/flv: add extensions for av1

---
 libavformat/flv.h    |  1 +
 libavformat/flvdec.c | 18 ++++++++++++++++++
 libavformat/flvenc.c | 27 +++++++++++++++++++++------
 3 files changed, 40 insertions(+), 6 deletions(-)

diff --git a/libavformat/flv.h b/libavformat/flv.h
index df44cd51f0..1f4462d41e 100644
--- a/libavformat/flv.h
+++ b/libavformat/flv.h
@@ -111,6 +111,7 @@ enum {
     FLV_CODECID_REALH263= 8,
     FLV_CODECID_MPEG4   = 9,
     FLV_CODECID_HEVC    = 12,   // 0xC
+    FLV_CODECID_AV1     = 13,   // 0xD
 };
 
 enum {
diff --git a/libavformat/flvdec.c b/libavformat/flvdec.c
index d68012eaf3..cde9240f55 100644
--- a/libavformat/flvdec.c
+++ b/libavformat/flvdec.c
@@ -323,6 +323,8 @@ static int flv_same_video_codec(AVCodecParameters *vpar, int flags)
         return vpar->codec_id == AV_CODEC_ID_H264;
     case FLV_CODECID_HEVC:
         return vpar->codec_id == AV_CODEC_ID_HEVC;
+    case FLV_CODECID_AV1:
+        return vpar->codec_id == AV_CODEC_ID_AV1;
     default:
         return vpar->codec_tag == flv_codecid;
     }
@@ -377,6 +379,11 @@ static int flv_set_video_codec(AVFormatContext *s, AVStream *vstream,
         vstream->need_parsing = AVSTREAM_PARSE_NONE;
         ret = 3;     // not 4, reading packet type will consume one byte
         break;
+    case FLV_CODECID_AV1:
+        par->codec_id = AV_CODEC_ID_AV1;
+        vstream->need_parsing = AVSTREAM_PARSE_HEADERS;  // keep inline with movenc
+        ret = 3;     // not 4, reading packet type will consume one byte
+        break;
     default:
         avpriv_request_sample(s, "Video codec (%x)", flv_codecid);
         par->codec_tag = flv_codecid;
@@ -1252,6 +1259,7 @@ retry_duration:
     if (st->codecpar->codec_id == AV_CODEC_ID_AAC ||
         st->codecpar->codec_id == AV_CODEC_ID_H264 ||
         st->codecpar->codec_id == AV_CODEC_ID_MPEG4 ||
+        st->codecpar->codec_id == AV_CODEC_ID_AV1 ||
         st->codecpar->codec_id == AV_CODEC_ID_HEVC) {
         int type = avio_r8(s->pb);
         size--;
@@ -1263,6 +1271,7 @@ retry_duration:
 
         if (st->codecpar->codec_id == AV_CODEC_ID_H264 ||
             st->codecpar->codec_id == AV_CODEC_ID_MPEG4 ||
+            st->codecpar->codec_id == AV_CODEC_ID_AV1 ||
             st->codecpar->codec_id == AV_CODEC_ID_HEVC) {
             // sign extension
             int32_t cts = (avio_rb24(s->pb) + 0xff800000) ^ 0xff800000;
@@ -1280,8 +1289,17 @@ retry_duration:
         }
         if (type == 0 && (!st->codecpar->extradata || st->codecpar->codec_id == AV_CODEC_ID_AAC ||
                            st->codecpar->codec_id == AV_CODEC_ID_H264 ||
+                           st->codecpar->codec_id == AV_CODEC_ID_AV1 ||
                            st->codecpar->codec_id == AV_CODEC_ID_HEVC)) {
             AVDictionaryEntry *t;
+            if (st->codecpar->codec_id == AV_CODEC_ID_AV1) {
+                /*
+                 * skip AV1CodecConfigurationRecord
+                 * keep inline with move.c -> mov_read_av1c()
+                 */
+                avio_skip(s->pb, 4);
+                size -= 4;
+            }
 
             if (st->codecpar->extradata) {
                 if ((ret = flv_queue_extradata(flv, s->pb, stream_type, size)) < 0)
diff --git a/libavformat/flvenc.c b/libavformat/flvenc.c
index ab6b4bcaa9..be953e60f9 100644
--- a/libavformat/flvenc.c
+++ b/libavformat/flvenc.c
@@ -28,6 +28,7 @@
 #include "avio.h"
 #include "avc.h"
 #include "avformat.h"
+#include "av1.h"
 #include "flv.h"
 #include "hevc.h"
 #include "internal.h"
@@ -48,6 +49,7 @@ static const AVCodecTag flv_video_codec_ids[] = {
     { AV_CODEC_ID_VP6A,     FLV_CODECID_VP6A },
     { AV_CODEC_ID_H264,     FLV_CODECID_H264 },
     { AV_CODEC_ID_HEVC,     FLV_CODECID_HEVC },
+    { AV_CODEC_ID_AV1,      FLV_CODECID_AV1 },
     { AV_CODEC_ID_NONE,     0 }
 };
 
@@ -495,6 +497,7 @@ static void flv_write_codec_header(AVFormatContext* s, AVCodecParameters* par, i
     if (par->codec_id == AV_CODEC_ID_AAC ||
         par->codec_id == AV_CODEC_ID_H264 ||
         par->codec_id == AV_CODEC_ID_MPEG4 ||
+        par->codec_id == AV_CODEC_ID_AV1 ||
         par->codec_id == AV_CODEC_ID_HEVC) {
         int64_t pos;
         avio_w8(pb,
@@ -549,6 +552,9 @@ static void flv_write_codec_header(AVFormatContext* s, AVCodecParameters* par, i
             case AV_CODEC_ID_HEVC:
                 ff_isom_write_hvcc(pb, par->extradata, par->extradata_size, 0);
                 break;
+            case AV_CODEC_ID_AV1:
+                ff_isom_write_av1c(pb, par->extradata, par->extradata_size);
+                break;
             default:
                 unsupported_codec(s, "Video", par->codec_id);
             }
@@ -859,6 +865,7 @@ end:
             FLVStreamContext *sc = s->streams[i]->priv_data;
             if (par->codec_type == AVMEDIA_TYPE_VIDEO &&
                     (par->codec_id == AV_CODEC_ID_H264 || par->codec_id == AV_CODEC_ID_MPEG4 ||
+                     par->codec_id == AV_CODEC_ID_AV1 ||
                      par->codec_id == AV_CODEC_ID_HEVC))
                 put_avc_eos_tag(pb, sc->last_ts);
         }
@@ -899,7 +906,7 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
     unsigned ts;
     int size = pkt->size;
     uint8_t *data = NULL;
-    int flags = -1, flags_size, ret = 0;
+    int flags = -1, flags_size, ret = 0, offset = 0;
     int64_t cur_offset = avio_tell(pb);
 
     if (par->codec_type == AVMEDIA_TYPE_AUDIO && !pkt->size) {
@@ -911,6 +918,7 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
         par->codec_id == AV_CODEC_ID_VP6  || par->codec_id == AV_CODEC_ID_AAC)
         flags_size = 2;
     else if (par->codec_id == AV_CODEC_ID_H264 || par->codec_id == AV_CODEC_ID_MPEG4 ||
+             par->codec_id == AV_CODEC_ID_AV1 ||
              par->codec_id == AV_CODEC_ID_HEVC)
         flags_size = 5;
     else
@@ -918,7 +926,8 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
 
     if (par->codec_id == AV_CODEC_ID_AAC || par->codec_id == AV_CODEC_ID_H264
             || par->codec_id == AV_CODEC_ID_MPEG4
-            || par->codec_id == AV_CODEC_ID_HEVC) {
+            || par->codec_id == AV_CODEC_ID_HEVC
+            || par->codec_id == AV_CODEC_ID_AV1) {
         buffer_size_t side_size;
         uint8_t *side = av_packet_get_side_data(pkt, AV_PKT_DATA_NEW_EXTRADATA, &side_size);
         if (side && side_size > 0 && (side_size != par->extradata_size || memcmp(side, par->extradata, side_size))) {
@@ -939,6 +948,7 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
         return AVERROR(EINVAL);
     }
     if (par->codec_id == AV_CODEC_ID_H264 || par->codec_id == AV_CODEC_ID_MPEG4 ||
+        par->codec_id == AV_CODEC_ID_AV1 ||
         par->codec_id == AV_CODEC_ID_HEVC) {
         if (pkt->pts == AV_NOPTS_VALUE) {
             av_log(s, AV_LOG_ERROR, "Packet is missing PTS\n");
@@ -989,6 +999,9 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
         if (par->extradata_size > 0 && *(uint8_t*)par->extradata != 1)
             if ((ret = ff_hevc_annexb2mp4_buf(pkt->data, &data, &size, 0, NULL)) < 0)
                 return ret;
+    } else if (par->codec_id == AV_CODEC_ID_AV1) {
+        if ((ret = ff_av1_filter_obus_buf(pkt->data, &data, &size, &offset)) < 0)
+            return ret;
     } else if (par->codec_id == AV_CODEC_ID_AAC && pkt->size > 2 &&
                (AV_RB16(pkt->data) & 0xfff0) == 0xfff0) {
         if (!s->streams[pkt->stream_index]->nb_frames) {
@@ -1040,7 +1053,7 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
             avio_w8(pb, AMF_END_OF_OBJECT);
         } else {
             // just pass the metadata through
-            avio_write(pb, data ? data : pkt->data, size);
+            avio_write(pb, data ? data + offset : pkt->data, size);
         }
         /* write total size of tag */
         data_size = avio_tell(pb) - metadata_size_pos;
@@ -1062,12 +1075,13 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
         } else if (par->codec_id == AV_CODEC_ID_AAC)
             avio_w8(pb, 1); // AAC raw
         else if (par->codec_id == AV_CODEC_ID_H264 || par->codec_id == AV_CODEC_ID_MPEG4 ||
+                 par->codec_id == AV_CODEC_ID_AV1 ||
                  par->codec_id == AV_CODEC_ID_HEVC) {
-            avio_w8(pb, 1); // AVC/HEVC NALU
+            avio_w8(pb, 1); // AVC/HEVC NALU / AV1 OBU
             avio_wb24(pb, pkt->pts - pkt->dts);
         }
 
-        avio_write(pb, data ? data : pkt->data, size);
+        avio_write(pb, data ? data + offset : pkt->data, size);
 
         avio_wb32(pb, size + flags_size + 11); // previous tag size
         flv->duration = FFMAX(flv->duration,
@@ -1102,7 +1116,8 @@ static int flv_write_packet(AVFormatContext *s, AVPacket *pkt)
         }
     }
 fail:
-    av_free(data);
+    if (pkt->data != data)
+        av_free(data);
 
     return ret;
 }
-- 
2.35.3

